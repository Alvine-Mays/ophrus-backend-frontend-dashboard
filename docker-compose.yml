version: '3.8'

services:
  # Base de donn√©es MongoDB
  mongodb:
    image: mongo:5.0
    container_name: ophrus_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ophrus_immo
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ophrus_network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: ophrus_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - ophrus_network

  # Backend API
  backend:
    build:
      context: ./Ophrus-immo
      dockerfile: Dockerfile
    container_name: ophrus_backend
    restart: unless-stopped
    ports:
      - "5002:5002"
    environment:
      NODE_ENV: development
      PORT: 5002
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/ophrus_immo?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: your_jwt_secret_key_here
      JWT_EXPIRES_IN: 7d
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: your_email@gmail.com
      EMAIL_PASS: your_app_password
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 10485760
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
    volumes:
      - ./Ophrus-immo:/app
      - /app/node_modules
      - uploads_data:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - ophrus_network
    command: npm run dev

  # Frontend
  frontend:
    build:
      context: ./ophrus-frontend-modern
      dockerfile: Dockerfile
    container_name: ophrus_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:5002/api
      REACT_APP_ENVIRONMENT: development
    volumes:
      - ./ophrus-frontend-modern:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ophrus_network
    command: npm start

  # Dashboard Admin
  dashboard:
    build:
      context: ./ophrus-admin-dashboard
      dockerfile: Dockerfile
    container_name: ophrus_dashboard
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      REACT_APP_API_URL: http://localhost:5002/api
      REACT_APP_ENVIRONMENT: development
    volumes:
      - ./ophrus-admin-dashboard:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ophrus_network
    command: npm start

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ophrus_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
    depends_on:
      - backend
      - frontend
      - dashboard
    networks:
      - ophrus_network

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ophrus_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ophrus_network

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ophrus_grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - ophrus_network

  # Elasticsearch pour les logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ophrus_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ophrus_network

  # Kibana pour visualiser les logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ophrus_kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ophrus_network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  ophrus_network:
    driver: bridge

