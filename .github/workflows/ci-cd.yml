name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  # Tests Backend
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Ophrus-immo/package-lock.json
    
    - name: Install Backend Dependencies
      run: |
        cd Ophrus-immo
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd Ophrus-immo
        npm run test:ci
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/ophrus_test
        JWT_SECRET: test_secret_key
    
    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./Ophrus-immo/coverage/lcov.info
        flags: backend

  # Tests Frontend
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ophrus-frontend-modern/package-lock.json
    
    - name: Install Frontend Dependencies
      run: |
        cd ophrus-frontend-modern
        npm ci
    
    - name: Run Frontend Tests
      run: |
        cd ophrus-frontend-modern
        npm run test:ci
    
    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./ophrus-frontend-modern/coverage/lcov.info
        flags: frontend

  # Tests Dashboard
  dashboard-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ophrus-admin-dashboard/package-lock.json
    
    - name: Install Dashboard Dependencies
      run: |
        cd ophrus-admin-dashboard
        npm ci
    
    - name: Run Dashboard Tests
      run: |
        cd ophrus-admin-dashboard
        npm run test:ci
    
    - name: Upload Dashboard Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./ophrus-admin-dashboard/coverage/lcov.info
        flags: dashboard

  # Analyse de sécurité
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, dashboard-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Security Audit - Backend
      run: |
        cd Ophrus-immo
        npm audit --audit-level moderate
    
    - name: Run Security Audit - Frontend
      run: |
        cd ophrus-frontend-modern
        npm audit --audit-level moderate
    
    - name: Run Security Audit - Dashboard
      run: |
        cd ophrus-admin-dashboard
        npm audit --audit-level moderate

  # Build et déploiement
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, dashboard-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    # Build Frontend
    - name: Build Frontend
      run: |
        cd ophrus-frontend-modern
        npm ci
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    
    # Build Dashboard
    - name: Build Dashboard
      run: |
        cd ophrus-admin-dashboard
        npm ci
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    
    # Déploiement sur serveur (exemple avec SSH)
    - name: Deploy to Production
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /var/www/ophrus
          git pull origin main
          
          # Backend
          cd Ophrus-immo
          npm ci --production
          pm2 restart ophrus-backend
          
          # Frontend
          cd ../ophrus-frontend-modern
          npm ci
          npm run build
          cp -r build/* /var/www/html/frontend/
          
          # Dashboard
          cd ../ophrus-admin-dashboard
          npm ci
          npm run build
          cp -r build/* /var/www/html/dashboard/
          
          # Redémarrer Nginx
          sudo systemctl reload nginx

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ Déploiement réussi !"
        # Ici vous pouvez ajouter des notifications Slack, Discord, etc.
    
    - name: Notify Failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Échec du déploiement !"
        # Ici vous pouvez ajouter des notifications d'erreur

